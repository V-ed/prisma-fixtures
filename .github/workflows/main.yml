name: CI/CD

on:
  push:
    branches:
      - 'master'
      - 'dev'

jobs:
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: '14'

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Lint Tests
        run: npm run lint:tests

  build-and-test:
    name: 'Build and Test - Node ${{ matrix.node }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14, 15]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test

  coverage:
    name: 'Coverage'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: '14'

      - name: Install
        run: npm ci

      - name: Coverage and send to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: npm run coveralls

  publish-if-version-changed:
    name: 'Publish if version changed'
    needs: ['lint', 'build-and-test']
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: '14'

      - name: Install
        run: npm ci

      - name: Publish to npm
        id: publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}

      - if: steps.publish.type == 'none' || steps.publish.outputs.old-version == steps.publish.outputs.version
        name: "Version hasn't changed, no new package published!"
        run: |
          echo "Version hasn't changed, no new package published!"

      - if: steps.publish.type != 'none' && steps.publish.outputs.old-version != steps.publish.outputs.version
        name: 'Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}'
        run: |
          echo "Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}"

      - if: steps.publish.type != 'none' && steps.publish.outputs.old-version != steps.publish.outputs.version
        name: Tag if published successfully
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          tag: 'v${{ steps.publish.outputs.version }}'
